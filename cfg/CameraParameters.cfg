#!/usr/bin/env python
PACKAGE = 'ensenso'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

## Capture parameters
capture = gen.add_group('Capture')
capture.add('AutoBlackLevel',   bool_t,   level=0, default=True, 
          description="When set to true the image sensor black level will be adjusted automatically")
capture.add('AutoExposure',     bool_t,   level=0, default=True, 
          description="When set to true the Exposure will be adjusted after each Capture command involving this camera.")
capture.add('AutoGain',         bool_t,   level=0, default=True, 
          description="When set to true the Gain will be adjusted after each Capture command involving this camera.")
capture.add('Binning',          int_t,    level=0, default=1,     min=1,    max=2,
          description="A positive integer specifying the binning factor.")
capture.add('BlackLevelOffset', double_t, level=0, default=1.0,   min=0.0,  max=1.0,
          description="A number between 0.0 and 1.0. Values closer to zero will yield darker images, values closer to one will increase the image brightness at the expense of noise in dark image regions.")
capture.add('Exposure',         double_t, level=0, default=1.5,   min=0.01, max=20.0,
          description="Specifies the camera's exposure time in milliseconds.")
capture.add('FlexView',         bool_t,   level=0, default=False, 
          description="Enables the FlexView function.")
capture.add('FlexViewImages',   int_t,    level=0, default=2,     min=2,    max=8,
          description="A value in the range [2,8] specifying the number of image pairs used for depth computation.")
capture.add('FrontLight',       bool_t,   level=0, default=False, 
          description="When set to true the camera's front LED will be switched on for the duration of the image exposure.")
capture.add('Gain',             double_t, level=0, default=1.,    min=1,    max=4,
          description="A value in the range 1..MaxGain specifying the camera's analog gain factor")
capture.add('GainBoost',        bool_t,   level=0, default=False, 
          description="When set to true an additional analog gain boost on the camera will be enabled.")
capture.add('HardwareGamma',    bool_t,   level=0, default=True, 
          description="When set to true the cameras analog gamma correction will be enabled.")
capture.add('Hdr',              bool_t,   level=0, default=False, 
          description="When set to true the HDR function of the camera will be enabled.")
capture.add('PixelClock',       int_t,    level=0, default=24,    min=7,    max=43,
          description="An integer number specifying the cameras pixel clock in MHz. Range: [7-43]")
capture.add('Projector',        bool_t,   level=0, default=True, 
          description="When set to true the camera's pattern projector will be switched on for the duration of the image exposure.")
capture.add('TargetBrightness', int_t,    level=0, default=80,    min=40,   max=210,
          description="Positive number from 40 to 210, specifying the desired average gray value of both images.")
capture.add('DisparityMapAOI',  bool_t,   level=0, default=False, 
          description="When set to true the camera's capture AOI will be reduced.")
# Trigger mode enumerator
mode_enum = gen.enum([gen.const('Software',    int_t, 0, "The camera starts the exposure by software trigger when the Capture command is issued."),
                      gen.const('FallingEdge', int_t, 1, "The Capture command waits for a high-to-low transition on the trigger input before starting the exposure."),
                      gen.const('RisingEdge',  int_t, 2, "The Capture command waits for a low-to-high transition on the trigger input before starting the exposure.")],
                      "Specifies how an image capture is initiated.")
capture.add("TriggerMode",      int_t,    level=0, default=0,     min=0,    max=2, edit_method=mode_enum,
          description="Specifies how an image capture is initiated.")

## Stereo parameters
stereo = gen.add_group('Stereo')
stereo.add('MinimumDisparity',     int_t,    level=0, default=-64,   min=-256, max=256,
          description="The minimum disparity in pixels where correspondences in the stereo image pair are being searched. The resolution reductions by Scaling and Binning are automatically accounted for. The actual value used in the matching process is output in ScaledMinimumDisparity.")
stereo.add('NumberOfDisparities',  int_t,    level=0, default=128,   min=32,   max=256,
          description="The number of disparities in pixels where correspondences in the stereo image pair are being searched, starting at MinDisparity. The resolution reductions by Scaling and Binning are automatically accounted for. The actual value used in the matching process is output in ScaledNumberOfDisparities.")
stereo.add('Scaling',               double_t, level=0, default=1.0,   min=0.25, max=1.0,
          description="Scaling allows to reduce the camera resolution by an arbitrary non-integer factor during rectification. The camera raw images stay at their original size, but the rectified images, DisparityMap and PointMap will be scaled by the specified factor to improve stereo matching runtime. This allows you to choose you own tradeoff between image resolution and performance.")

## Streaming parameters
stream = gen.add_group('Stream')
stream.add('Cloud',   bool_t,   level=0, default=False, 
          description="When set to true the camera streams the point cloud. The rate can be adjusted changing PixelClock")
stream.add('Images',  bool_t,   level=0, default=True, 
          description="When set to true the camera streams the images. The rate can be adjusted changing PixelClock")

exit(gen.generate(PACKAGE, 'ensenso_driver', 'CameraParameters'))


# The stereo maching volume is obtained from these parameters:
# Parameters > DisparityMap > Scaling

# Parameters > DisparityMap > StereoMatching > MinimumDisparity
# Range: [-256, 256]

# Parameters > DisparityMap > StereoMatching > NumberOfDisparities
# Range: [32, 256]
# Note: The NumberOfDisparities parameter must be a multiple of 16.
